// Code generated by go-bindata.
// sources:
// module/module.c
// module/module.go
// module/module.h
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _moduleModuleC = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x5d\x8f\xe2\x36\x14\x7d\x4e\x7e\x85\xcb\x48\xab\x04\xb1\xb3\x54\xfb\x48\x3b\x12\x9a\x81\x16\x69\x16\xa2\x81\xa9\xb6\x4f\x96\x49\x6e\x20\x6d\x62\xa7\xb6\xb3\xb3\xe9\x6a\xfe\x7b\xaf\xed\x00\x21\x9b\x1d\xa5\xbc\x24\xb1\xcf\xbd\xe7\x7e\xf9\x98\x9b\x2c\x4d\x20\x25\x34\xda\x6c\x57\x9f\xe9\x3d\xdd\x6e\x9e\x9f\xee\x17\xfe\x4d\xc5\x7b\x97\x81\x27\x59\xea\xfb\x37\x19\x8f\xf3\x2a\x01\x32\x8a\x6a\x7d\x14\xfc\xf6\x38\x6a\xad\x29\x2d\xab\x58\x17\x50\xec\x41\x5e\xef\xe0\x9a\x90\xb5\xd8\xff\x05\xb1\xbe\xde\xd9\x57\x69\x0a\xf2\xb2\xd3\x36\x12\x49\x95\x43\xb3\x98\x92\xe8\x4f\xfa\xc7\xe2\x69\xbb\xda\xac\xe9\xef\x8b\xcf\xe4\x8e\x4c\xbf\x4e\x3f\x4e\xed\x0f\xe3\x93\x52\x48\x32\x2a\x6d\x54\xe4\x23\xc9\x14\xe1\x42\x93\x1a\x34\x51\x55\x59\x0a\xa9\x21\x19\x9d\xd3\xd0\x75\x09\x26\xcd\x2f\x22\x4b\xc6\x24\x67\xc5\x3e\x61\xf4\xc8\x78\x92\x83\xa4\x69\xc5\xe3\xd9\x05\xe3\x92\x22\xdf\x7c\x2f\xaa\x37\x36\x4c\xa4\x9f\x3f\xf8\x5e\x8f\x19\x29\xb5\x9c\xf9\xaf\x1d\x8f\xe8\x4c\x69\xa6\xb3\x98\x9c\x3c\x8c\xfd\x8e\x31\x87\x97\x20\xaa\x77\x48\xe9\x00\x64\x6c\xe8\x27\x67\x03\x32\x66\xf2\xa0\xda\xdf\x7f\xbf\x24\x2a\x34\x51\x5d\x7b\x22\x63\x05\x79\x3a\xf3\x3d\xf3\x20\xbf\x92\xa0\xbb\x1d\x1a\xc7\xef\xef\x74\x49\x59\x9e\x8b\x38\x70\x3c\xd3\xb0\x31\x79\x7f\x87\x29\xa0\xdd\x01\x34\xbd\x36\x0d\x0c\x44\x82\xae\x24\x27\xc1\x39\x91\xd0\xd1\xbd\x9e\x53\x34\x25\xed\x66\x97\x80\xe3\xea\x0b\xd5\xe6\xe0\x98\xc5\x9e\x9e\x83\x4b\x25\x40\xd0\xa1\x09\xdb\x3c\x97\x4a\x74\xd9\xd0\x3a\x46\xbe\x5e\xb6\xb7\x2a\x2a\xf4\x11\xa4\x0d\x27\x3e\x32\xc4\xc3\x17\xe0\x7a\x76\xfa\x8a\x05\xd7\xf0\xd5\x7c\xe3\x28\x06\x3f\x45\xf5\x5c\x1e\x68\xc4\xa4\x82\x5d\x55\xe6\x10\x38\x6f\x23\xa5\x46\x13\xf2\xce\x9a\xe2\xb3\x31\x0a\xad\xd7\x53\xf1\xd6\xcf\x8f\x8f\xe8\xe6\x15\xd3\x76\xa3\xd5\x89\xdf\x04\x4f\x1b\x2c\x3e\x5c\xd5\xb1\x25\x3d\xb0\xe0\xdc\xb2\x09\x69\x38\x4f\x94\xb3\xcb\xbc\x92\xb1\x04\x55\xe5\xc6\x47\x54\x6f\xb5\xcc\xf8\x81\x2e\xa5\x28\xdc\xeb\x9c\x27\xdb\xec\x5f\x08\x90\xe4\x56\x4e\x27\xc4\x3e\x7f\x6e\x35\xdb\x19\x5f\xd7\xbe\x35\xa9\xdd\xea\xe3\x0e\x12\x75\x8f\x0b\x5d\xad\x57\xbb\xc0\xa4\x1e\xfa\x1e\xb2\xfc\xe8\xf7\x61\x8c\x53\xa0\x30\x9e\xf1\x07\xdf\x1b\x5d\xfb\x1e\x4d\xda\x38\x6c\x33\x67\x85\xc5\x19\xbc\x48\x3b\x0d\x0f\x27\x67\xdc\x9e\xa9\x2c\x3e\x39\x7d\x93\x1c\xc1\x99\x86\xe2\x84\x0d\x12\x70\x3d\x12\x32\xec\x9f\xe9\x89\x67\x8d\x9a\xaf\x21\xfe\x4b\x2c\xba\x1e\x02\xc4\x23\xc8\xb4\x96\x43\xa0\x6a\x38\x34\x16\x45\xc9\xe4\xa0\x4a\x48\x28\x07\xb9\x64\x8a\xf2\xca\x68\xfe\x40\xb0\x82\x7f\x2a\xe0\xf1\xa0\x18\x10\x5e\xb0\xb2\xc4\x39\x1d\x82\x3e\x32\x75\x24\xb6\x71\x1a\x24\x67\xb2\x36\xa2\xdc\xed\x5c\xa3\x0f\x4d\xe7\xcc\xeb\xa0\x12\x0f\x2b\x6f\xd3\x34\xf1\x3f\xba\x36\x08\x8b\x75\x70\x37\xa5\x01\x47\x35\xdd\x45\xcb\xc7\xf9\x6f\x5b\xfa\xb0\x58\xce\x9f\x1f\x77\x93\x2b\x70\x9a\xb3\x83\xb2\x07\xa8\x7d\x64\x88\xe7\x79\x16\x41\xcc\xc0\x8a\xd8\x14\xea\x15\xef\xa6\xa8\xfe\xb4\x79\x30\xc7\x93\x2e\x9f\xd7\xf7\x7e\xc6\x33\xed\x6e\xde\xc0\x68\x79\xe8\x7f\x6b\x2b\x89\xdb\x41\xab\xee\xf5\x67\xce\xfd\xad\x39\x93\xf0\xf2\xbd\x56\xe1\x62\x23\x9c\x4e\x3a\xe8\x13\xb0\xa4\x0e\xde\xf5\xf8\x08\xc9\x2f\x78\x1b\xb5\xf4\xd2\x48\x25\x81\x5c\x81\x5d\xc3\xd4\x57\xeb\xfb\xa7\xc5\xb2\xdf\xd8\xea\xaa\xef\xb9\x28\xad\xde\xd1\x15\xe6\xf3\xc9\xe5\xd3\xfc\xa3\xc0\xa2\x58\x21\xb2\x12\xe9\xb6\xe8\x3c\x49\x5c\x8a\x81\xc3\xa0\x94\x7f\x27\x3e\xad\xeb\xe8\x07\xe4\xc8\xfd\x5f\x00\x00\x00\xff\xff\xca\xda\xb5\xa7\x58\x09\x00\x00")

func moduleModuleCBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleC,
		"module/module.c",
	)
}

func moduleModuleC() (*asset, error) {
	bytes, err := moduleModuleCBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.c", size: 2392, mode: os.FileMode(420), modTime: time.Unix(1450574902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _moduleModuleGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xc1\x6a\xf3\x30\x10\x84\xcf\xd1\x53\x2c\xfe\xe1\x47\x0a\xb6\x02\xbd\x14\x4a\xe9\xc5\x97\x1e\xfb\x06\x46\x91\xd7\xb2\x88\x2c\x0b\x7b\x5d\x92\x86\xbc\x7b\x65\x3b\x25\xb5\x9b\xf6\xb6\x7c\x33\xab\x19\x09\x05\xa5\x0f\xca\x20\x34\xca\x7a\xc6\x76\xbb\x7f\xda\xb4\x10\x0e\x26\xd3\xad\xaf\xac\x79\x82\x70\xa2\xba\xf5\xd9\x83\x7c\x84\x2c\xd3\x95\x53\xa6\x8f\x83\xb3\xfb\x7e\x74\x5b\xaf\xdd\x50\x22\x3c\xf7\x54\x46\x26\xeb\x17\x66\x9b\xd0\x76\x04\x49\x9e\xb0\xaf\x99\xb3\x4d\x32\xf8\x5e\x55\x18\xd9\xc6\xa9\x66\x5f\x2a\x48\xac\x4f\x98\x18\x33\xf1\x38\xb9\x66\x5e\xd4\xca\x97\x0e\x3b\x46\xa7\x80\x2b\x06\xf3\x21\xf2\xad\xb5\x9e\xa2\xe5\xb6\x6b\x90\x8a\xd5\x7e\x35\x78\x7d\x87\x73\xb1\x3e\xf4\xcc\x36\x1d\xd2\xd0\x79\xe0\x4b\x45\xf0\x65\x1e\xff\x3f\xeb\xf2\xf5\xaa\x0b\x76\xf9\xb5\x7f\xa1\x95\x73\x73\x89\x3b\x02\x0f\x2b\x9a\x02\xbe\xa3\xa7\x14\xe2\xbb\x13\x1e\x09\xb6\xb9\xd4\xb5\xea\x04\xf0\xeb\x94\x42\x2e\x7b\xfb\x81\x05\x89\xef\x95\xb7\x7c\x3b\x86\xdc\x5c\x7f\x2d\xfe\xb8\x51\x10\x91\x2d\x93\xa7\x4b\x4d\xbd\xc7\x3f\x11\x9f\xeb\x7c\x61\x9f\x01\x00\x00\xff\xff\x4c\x34\xfb\x82\x26\x02\x00\x00")

func moduleModuleGoBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleGo,
		"module/module.go",
	)
}

func moduleModuleGo() (*asset, error) {
	bytes, err := moduleModuleGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.go", size: 550, mode: os.FileMode(420), modTime: time.Unix(1450575017, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _moduleModuleH = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5f\x4f\xdb\x30\x10\x7f\x26\x9f\xe2\xd4\xbe\x40\x35\x1a\xca\x10\x42\xcb\xd8\x1e\x4a\xd7\x55\xda\x56\xc4\x9f\x87\x6d\x9a\x2c\xc7\x71\x12\x0b\xc7\x8e\x1c\x87\xc1\x10\xdf\x7d\xe7\x38\x09\x41\x64\x42\x7b\x68\xe3\xf8\xf7\xe7\xce\x77\xe7\x84\x33\x58\x1a\x4e\x2d\x4f\x20\xbe\x87\x49\xa6\xc1\x6a\x2d\x81\x65\x7a\x02\xfb\x70\xb6\x85\x6f\xdb\x2b\x58\x9d\x6d\xae\xe6\x30\x0b\x83\x00\xe9\x25\x65\x37\x34\xe3\x90\x09\x9b\xd7\xf1\x9c\xe9\x22\xbc\x93\x34\x0e\x33\xbd\x2f\x69\x11\x27\x34\x2c\x74\x52\x4b\xde\xf1\x2f\x2d\x35\x16\x74\x0a\x25\xc6\x29\x62\x04\x52\xa3\x0b\x10\x45\xa9\x71\x7f\xb2\x9c\x00\x5a\x14\x5c\xd9\x6a\x0e\x8d\x26\x08\xa6\x42\x31\x59\x27\x1c\xde\x57\x36\x91\x22\x9e\xe7\x1f\xdc\x36\x9a\xad\x54\xf2\x5f\x56\xc3\xf8\xb1\x16\x92\x9b\x52\xe2\x61\xdd\xf9\xd0\x44\x4b\x9d\xd5\xbc\xe5\x4e\x45\xaa\x12\x9e\xc2\x7a\x4b\x96\xf8\x3b\xbf\xd8\x7e\xd9\xae\xaf\x57\xe4\x73\x30\xc5\x6d\xa1\xf8\x08\x12\xd8\xfb\x92\x3b\x51\x25\x32\x85\x25\x64\x39\x35\xb0\xd6\x1b\x65\x4f\xa2\x1e\xab\xd5\x73\xf4\x5a\x3c\x83\xab\xdc\x25\xdf\x88\x16\xc7\x23\xaa\x0e\x77\xb2\x21\x01\x5f\xbd\xea\xed\xe1\x88\xca\xa3\x4e\x33\x84\xa5\x56\x99\xff\x6b\x94\xc7\x47\x23\xca\x21\xc7\xe9\x87\xa4\x56\xe5\x9f\xc3\x6d\x4f\x6c\x17\x4f\x00\x21\x97\x9b\x1f\x2b\x72\xf5\xfd\x7c\x45\x48\x8b\x96\xd6\x3c\x11\x52\xa9\xa9\x4b\xf4\x93\x7b\x0e\x33\x4d\x74\xed\xfa\xdb\x22\xc3\x1c\x08\xc1\x26\x97\x92\xdf\xf5\xe2\xa5\x7f\x1f\x27\xf5\x46\x2d\x6b\x71\x88\xb5\x0f\xc2\x10\x2a\x4b\xad\x60\x40\xab\x8a\x1b\x2b\xb4\xc2\xc1\x87\x82\xde\x70\xa8\x6a\xc3\xc1\xe6\x38\x5c\x38\x2f\x20\x2a\x88\xb9\xc0\x6a\xd4\x15\x16\x07\x69\xd4\xb0\x5c\x58\xce\x2c\xd2\x9c\x0f\xa6\x20\x39\xad\x2c\xfc\xc6\x0b\x81\x0e\x16\x61\xa4\x57\xe2\x0f\x77\x53\xd7\x94\x6a\xde\x27\xd6\xcc\x00\x61\x39\x67\x37\x24\xd5\x86\x1c\x1f\x91\x58\x58\x52\x6a\xac\x0c\x37\xa4\x93\x93\x46\xf6\xd3\x99\xe8\x74\xf7\x56\x8b\x64\xb6\x07\xa7\xa7\x80\x35\x0e\xe1\x04\x3e\xc2\x02\xde\xc1\xfe\xe2\x57\x34\x18\x41\x6b\x6a\x66\xe1\xc1\x87\x98\x95\x91\x0f\x0d\x2a\x82\x47\x5c\x5e\x5a\x83\xbe\x4f\x15\x72\x9e\x30\x5b\xeb\xaf\xb4\x7c\xb9\xb9\xcc\xa9\x8a\x5e\x3a\x7b\xd8\x46\xed\xe2\xd6\x3b\x6f\x5c\xe6\x29\x65\xfc\x9f\x8a\x84\x5a\xda\xa5\x23\xb9\xea\x96\x0c\x43\xfb\xdc\xa4\x70\xea\x60\xca\x55\x22\xd2\xe1\x45\x7f\xfd\xce\xb6\xdd\x2e\x65\x5d\xb9\x5f\xc0\xef\x30\x1b\xd5\x7c\x0c\x1e\x7a\xc3\x6e\xb7\x29\x24\x64\xdc\x12\xff\xa9\x22\x78\xce\x04\x03\xec\xee\x45\x4d\xd4\x0b\x8e\x5d\xc5\x49\xc0\x63\x00\x76\x07\x9e\xb3\x08\xa3\x52\xba\xb8\xed\xf1\x46\x50\x62\xbc\xc3\x43\xb0\xe3\xda\x30\x03\x73\x10\x05\x3b\xae\x8d\xc4\x82\x59\x44\xc1\x63\xd4\x27\xf3\xba\xcb\x08\xe4\x67\x01\xca\x83\x37\xe0\x03\x94\x8b\x7e\x75\xe8\x4e\x31\x52\x92\xc7\xae\x0e\x7f\x03\x00\x00\xff\xff\x17\x9d\xf8\x61\xed\x05\x00\x00")

func moduleModuleHBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleH,
		"module/module.h",
	)
}

func moduleModuleH() (*asset, error) {
	bytes, err := moduleModuleHBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.h", size: 1517, mode: os.FileMode(420), modTime: time.Unix(1450575014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"module/module.c": moduleModuleC,
	"module/module.go": moduleModuleGo,
	"module/module.h": moduleModuleH,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"module": &bintree{nil, map[string]*bintree{
		"module.c": &bintree{moduleModuleC, map[string]*bintree{}},
		"module.go": &bintree{moduleModuleGo, map[string]*bintree{}},
		"module.h": &bintree{moduleModuleH, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


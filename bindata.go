// Code generated by go-bindata.
// sources:
// module/module.c
// module/module.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _moduleModuleC = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x51\x6f\xa3\x38\x10\x7e\x86\x5f\xe1\x4b\xa5\x0a\x10\xdb\xad\xb4\x8f\xbd\xab\x14\xb5\xc9\x5d\xa4\x6e\x82\x9a\xf4\xb4\xf7\x64\x39\x30\x24\xdc\x01\xe6\x6c\xb3\x5d\x6e\xd5\xff\x7e\x63\x9b\x50\x42\xd9\x5d\x36\x2f\xc4\xf6\xe7\xef\x9b\x99\xcf\x1e\x5f\x64\x69\x02\x29\xa1\xd1\x66\xbb\xfa\x44\xef\xe8\x76\xf3\xf4\x78\xb7\x70\x2f\xea\x72\x74\x1a\xca\x24\x4b\x5d\xf7\x22\x2b\xe3\xbc\x4e\x80\xcc\xa2\x46\x1d\x79\x79\x75\x9c\xf5\xe6\xa4\x12\x75\xac\x0a\x28\xf6\x20\xce\x57\x70\x8e\x8b\x86\xef\xff\x86\x58\x9d\xaf\xec\xeb\x34\x05\xf1\xba\x82\x4b\x29\x89\xfe\xa2\x7f\x2e\x1e\xb7\xab\xcd\x9a\xfe\xb1\xf8\x44\x6e\xc9\xf5\x97\xeb\x0f\xd7\xe6\x87\xa1\x08\xc1\x05\x99\x55\x26\x00\xf2\x81\x64\x92\x94\x5c\x91\x06\x14\x91\x75\x55\x71\xa1\x20\x99\x75\x11\xab\xa6\x02\x9d\xd1\x67\x9e\x25\x01\xc9\x59\xb1\x4f\x18\x3d\xb2\x32\xc9\x41\xd0\xb4\x2e\xe3\x9b\x57\x8c\x8d\x9f\x7c\x75\x9d\xa8\xd9\x98\x88\x50\x7e\x7e\xef\x3a\x23\xdb\x48\xa5\xc4\x8d\xfb\x32\x60\x44\x32\xf8\xa2\x40\x94\xad\xde\x01\x14\x3d\x47\x78\x3e\x62\xa4\x62\x2a\x8b\xc9\x49\x25\x70\x07\x02\x25\x3c\x7b\x51\xb3\xc3\xb0\x2c\x80\x04\x3a\xc4\xb0\xdb\x40\x02\x26\x0e\xb2\x3f\xfe\xe7\x39\x91\xbe\x8e\xfc\x9c\x89\x04\x12\xf2\xf4\xc6\x75\xf4\x87\xfc\x46\xbc\xe1\xb2\xaf\x89\xdf\xdd\xaa\x8a\xb2\x3c\xe7\xb1\x67\x75\xae\xfd\x76\xcb\xbb\x5b\x4c\x13\xf7\x8d\xe7\xe1\x08\x50\x35\xe6\xea\x75\x89\xf8\x56\xee\xa5\x4b\x51\x97\x61\x98\x5d\x02\x56\x6b\x2c\x54\x93\x83\x55\xe6\x7b\xda\x05\x97\x0a\x00\x6f\x20\xe3\xb7\x3a\xc6\xb3\x81\x44\x8c\x0a\xb4\x8d\x0e\x09\xe3\x23\x13\x01\x49\x98\x62\x3a\xaf\xec\x3f\xa0\x78\x56\xf0\x83\x0c\xaf\x8e\xfd\x98\x69\x64\xc9\xb3\x3e\x57\xd7\x21\xb1\x22\xf0\x19\x4a\x75\x1a\xc4\xbc\x54\xc8\x3e\x62\x39\x79\xe3\x39\x66\x69\x08\xc7\xaa\xf2\x3d\xe7\xb9\x3a\x82\xf0\x4f\x59\x92\xc0\x04\x70\x73\x1a\xb5\x11\xe0\x18\xaf\x95\xf7\x4b\xd4\xcc\xc5\x81\x46\x4c\x48\xd8\xd5\x55\x0e\x9e\x65\x9b\x49\x39\x0b\xc9\x65\x1b\xfb\xe5\x29\x6c\xc3\x7a\x32\x79\xfd\xf4\xf0\x80\x34\x2f\x58\xc0\x1f\x16\x0a\x3f\xf6\x74\xe0\xd1\x19\x2b\x5a\x77\xb4\xc2\xae\x5e\x5d\xa5\x9c\xd7\xd4\x04\xc8\x3a\xd7\x1c\x51\xb3\x55\x22\x2b\x0f\x74\x29\x78\x61\xff\xce\xcb\x64\x8b\x0e\x7a\x28\x72\xa5\x8d\x0d\xb5\xe8\x95\x36\xb5\x77\x30\x2d\x41\xff\x3c\x9e\xdd\xaa\xa1\x03\xb8\x82\x62\xc3\xeb\x4f\x57\xeb\xd5\xce\xd3\xe9\xfb\xae\x83\x3e\x7f\xeb\xf7\x3e\xc0\x13\xab\x03\x08\xde\xbb\xce\xec\x9c\x7b\x16\xf6\x71\x68\x75\xc9\x0a\x83\xd3\x78\x9e\x0e\x4c\xf7\xc3\x0e\xb7\x67\x32\x8b\x4f\xa4\xdf\x15\x47\x70\xa6\xa0\x38\x61\xbd\x04\xac\x4f\x5c\xf8\xe3\xf7\x2f\x74\xcc\xa6\x76\x34\x85\xbf\xc2\xc2\xab\x29\x40\x6c\x17\x4c\x29\x31\x05\x2a\xa7\x43\x63\x5e\x54\x4c\x4c\xaa\x84\x80\x6a\x12\x25\x93\xb4\xac\xf5\x73\x35\x11\x2c\xe1\xdf\x1a\xca\x78\x52\x0c\x08\x2f\x58\x55\xe1\x59\x9d\x82\x3e\x32\x79\x24\xc6\x38\xdd\x8c\x98\x68\xf4\x23\x33\x74\xae\xed\x11\xad\x73\xfa\xef\xa4\x12\x4f\x2b\x6f\x6b\x1a\xff\x09\xd7\x26\x61\xb1\x0e\xf6\x91\xd7\xe0\xa8\xa1\xbb\x68\xf9\x30\xff\x7d\x4b\xef\x17\xcb\xf9\xd3\xc3\x2e\x3c\x03\xa7\x39\x3b\x48\x73\x81\xfa\x57\x86\x38\x8e\x63\x10\x44\x1f\x58\x1e\xeb\x42\xe9\xce\x1d\x35\x1f\x37\xf7\xfa\x7a\xd2\xe5\xd3\xfa\xce\xcd\xca\x4c\x15\x3c\xa9\xb1\xaf\xe9\xb6\xec\xbb\x5f\xfb\xdd\xc4\xae\xe0\xae\xe1\x73\xae\xef\xfd\x95\xbe\x93\xf0\xfc\xb6\x5f\xe1\x64\xdb\x3c\x6d\xeb\xa0\x8f\xc0\x92\xc6\xbb\x1c\xe1\xf0\xc9\xaf\xf8\x72\xf6\x7a\xa6\x6e\x97\x04\x72\x09\x66\x0e\x53\x5f\xad\xef\x1e\x17\xcb\xf1\xcd\xa6\xb7\xba\x8e\x8d\xd2\xf4\x3c\xba\xc2\x7c\x3e\xda\x7c\x66\x76\x1e\x8b\x62\x1a\x91\x69\x93\x76\x89\xce\x93\xc4\xa6\xe8\x59\x0c\xb6\xf3\x37\xcd\xa7\xf7\x74\x7e\x43\x1c\xb5\xff\x0f\x00\x00\xff\xff\x74\x57\xc5\x5c\x13\x0a\x00\x00")

func moduleModuleCBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleC,
		"module/module.c",
	)
}

func moduleModuleC() (*asset, error) {
	bytes, err := moduleModuleCBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.c", size: 2579, mode: os.FileMode(420), modTime: time.Unix(1450610710, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _moduleModuleGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xc1\x6a\xf3\x30\x10\x84\xcf\xd1\x53\x2c\xfe\xe1\x47\x0a\xb6\x02\xbd\x14\x4a\xe9\xc5\x97\x1e\xfb\x06\x46\x91\xd7\xb2\x88\x2c\x0b\x7b\x5d\x92\x86\xbc\x7b\x65\x3b\x25\xb5\x9b\xf6\xb6\x7c\x33\xab\x19\x09\x05\xa5\x0f\xca\x20\x34\xca\x7a\xc6\x76\xbb\x7f\xda\xb4\x10\x0e\x26\xd3\xad\xaf\xac\x79\x82\x70\xa2\xba\xf5\xd9\x83\x7c\x84\x2c\xd3\x95\x53\xa6\x8f\x83\xb3\xfb\x7e\x74\x5b\xaf\xdd\x50\x22\x3c\xf7\x54\x46\x26\xeb\x17\x66\x9b\xd0\x76\x04\x49\x9e\xb0\xaf\x99\xb3\x4d\x32\xf8\x5e\x55\x18\xd9\xc6\xa9\x66\x5f\x2a\x48\xac\x4f\x98\x18\x33\xf1\x38\xb9\x66\x5e\xd4\xca\x97\x0e\x3b\x46\xa7\x80\x2b\x06\xf3\x21\xf2\xad\xb5\x9e\xa2\xe5\xb6\x6b\x90\x8a\xd5\x7e\x35\x78\x7d\x87\x73\xb1\x3e\xf4\xcc\x36\x1d\xd2\xd0\x79\xe0\x4b\x45\xf0\x65\x1e\xff\x3f\xeb\xf2\xf5\xaa\x0b\x76\xf9\xb5\x7f\xa1\x95\x73\x73\x89\x3b\x02\x0f\x2b\x9a\x02\xbe\xa3\xa7\x14\xe2\xbb\x13\x1e\x09\xb6\xb9\xd4\xb5\xea\x04\xf0\xeb\x94\x42\x2e\x7b\xfb\x81\x05\x89\xef\x95\xb7\x7c\x3b\x86\xdc\x5c\x7f\x2d\xfe\xb8\x51\x10\x91\x2d\x93\xa7\x4b\x4d\xbd\xc7\x3f\x11\x9f\xeb\x7c\x61\x9f\x01\x00\x00\xff\xff\x4c\x34\xfb\x82\x26\x02\x00\x00")

func moduleModuleGoBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleGo,
		"module/module.go",
	)
}

func moduleModuleGo() (*asset, error) {
	bytes, err := moduleModuleGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.go", size: 550, mode: os.FileMode(420), modTime: time.Unix(1450606095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"module/module.c": moduleModuleC,
	"module/module.go": moduleModuleGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"module": &bintree{nil, map[string]*bintree{
		"module.c": &bintree{moduleModuleC, map[string]*bintree{}},
		"module.go": &bintree{moduleModuleGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// module/module.c
// module/module.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _moduleModuleC = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x5d\x6f\xa3\x38\x14\x7d\x86\x5f\xe1\xa5\x52\x05\x11\xd3\x89\x34\x8f\xdd\xa9\x14\xb5\xc9\x6e\xa4\x4e\x82\x9a\x74\x35\xfb\x64\x39\x60\x12\x76\xc1\x66\x6d\x33\x1d\x76\xd4\xff\xbe\xd7\x36\xa4\x40\x98\x19\x36\x2f\xc4\xbe\xc7\xe7\x7e\x9c\xeb\xeb\xab\x2c\x4d\x68\x8a\x70\xb4\xdd\xad\x3f\xe3\x7b\xbc\xdb\x3e\x3f\xdd\x2f\xdd\xab\x8a\x8d\x6e\x53\x96\x64\xa9\xeb\x5e\x65\x2c\xce\xab\x84\x22\x2f\xaa\xd5\x89\xb3\x9b\x93\xd7\xd9\x93\x4a\x54\xb1\x2a\x68\x71\xa0\xa2\x6f\x81\x3d\x2e\x6a\x7e\xf8\x8b\xc6\xaa\x6f\x39\x54\x69\x4a\xc5\x9b\x05\x4c\x29\x8a\xfe\xc4\x7f\x2c\x9f\x76\xeb\xed\x06\xff\xbe\xfc\x8c\xee\xd0\xfc\xeb\xfc\xc3\xdc\xfc\x20\x14\x21\xb8\x40\x5e\x69\x02\x40\x1f\x50\x26\x11\xe3\x0a\xd5\x54\x21\x59\x95\x25\x17\x8a\x26\xde\x39\x62\x55\x97\x54\x67\x94\x31\x85\x72\x52\x1c\x12\x82\x4f\x84\x25\x39\xbd\x7d\xb3\xd9\xb8\xd1\x37\xd7\x89\xea\xad\x89\x04\xdc\x2e\x1e\x5c\xa7\x77\x00\xb5\xe7\x5e\xfb\x44\x02\x98\xe8\x57\x45\x05\xeb\xef\xa3\x23\x55\xb8\xb7\xe3\x07\x00\x95\x8a\xa8\x2c\x46\xad\xa7\x99\xdb\x27\xc3\x8c\xbe\xf8\x51\xbd\x87\xd0\x2c\x00\xcd\x74\x98\xe1\xf9\x00\x9a\x11\x71\x94\xdd\xf5\xdf\x2f\x89\x0c\x74\xf4\x7d\x26\x34\x93\x34\x4f\x6f\x5d\x47\x7f\xd0\x47\xe4\x0f\xcd\x81\x26\x7e\x77\xa7\x4a\x4c\xf2\x9c\xc7\xbe\xf5\x33\x0f\x9a\x23\xef\xee\x9a\x3c\x3e\x8e\x67\xe2\x08\xaa\x2a\x48\xda\x3f\xa7\x12\x58\x87\xaf\xe7\x24\xbf\xf0\x2c\x19\xe6\x97\x50\xeb\x6d\x2c\x58\x93\x85\xf5\xcd\x0f\xf8\x1c\x5e\x2a\x28\xf5\x07\x6e\x82\xc6\x8f\x51\xae\xc7\x85\x63\x70\x80\x9b\xe0\x80\x2f\x3e\x11\x31\x43\x09\x51\x44\x27\x96\xfd\x4b\x31\x34\x0a\x7c\x80\xe0\x4d\xb9\x9f\x12\x5d\x5a\xfc\x41\x77\x84\xc8\x7a\xa2\x5f\x28\x53\xed\x22\xe6\x4c\x81\x8b\x11\xe1\xd1\x85\xf2\x90\xe9\x25\x6f\x53\x99\x1f\xe9\xcf\xd5\x89\x8a\xa0\x4d\x15\xcd\x4c\x00\xb7\xed\xaa\x89\x00\xd6\x70\xb1\xfc\x5f\xa2\x7a\x21\x8e\x38\x22\x42\xd2\x7d\x55\x82\x92\x96\xcd\x93\xd2\x0b\xd1\x75\x13\xfb\x75\x1b\xb6\x61\x6d\x85\xde\x3c\x3f\x3e\x02\xcd\x2b\x54\xf1\x67\xd5\x82\x8f\x6d\x10\x68\x9e\x91\xca\x75\xdb\x2b\x3c\x17\xec\x5c\x2a\xe7\x2d\x37\x41\x65\x95\x6b\x96\xa8\xde\x29\x91\xb1\x23\x5e\x09\x5e\xd8\xbf\x0b\x96\xec\x40\x47\x1f\xdc\xdc\x68\x79\x43\xed\xf6\x46\x4b\xdb\xe9\x4e\x4b\xd0\x6d\xca\xde\xe5\x1a\x4a\x00\x16\x70\x36\x9c\x04\x78\xbd\x59\xef\x7d\x9d\x7f\xe0\x3a\xf3\x10\x7d\xef\xf7\x7e\x06\x6d\xab\x03\x98\xbd\x77\x1d\xaf\xcf\xed\x85\x5d\x1c\x68\xcd\x48\x61\x70\x1a\xcf\xd3\x81\xea\x41\x78\xc6\x1d\x88\xcc\xe2\x96\xf4\x87\xce\x01\x9c\x29\x5a\xb4\x58\x3f\xa1\x56\x28\x2e\x82\xf1\x4b\x18\x3a\xe6\x50\xb3\x9a\xc2\x5f\x42\xe1\xd5\x14\x20\x8c\x0c\xa2\x94\x98\x02\x95\xd3\xa1\x31\x2f\x4a\x22\x26\x55\x42\xd0\x72\x12\x25\x91\x98\x55\xfa\xc5\x9a\x08\x96\xf4\x9f\x8a\xb2\x78\x52\x0c\x00\x2f\x48\x59\x42\xaf\x4e\x41\x9f\x88\x3c\x21\x23\x9c\x1e\x49\x44\xd4\x69\xc5\xe2\xa1\x72\xcd\x90\x68\x94\xd3\x7f\x27\x95\x78\x5a\x79\x1b\xd1\xf8\xff\x50\x6d\x12\x16\xea\x60\xdf\x79\x0d\x8e\x6a\xbc\x8f\x56\x8f\x8b\xdf\x76\xf8\x61\xb9\x5a\x3c\x3f\xee\xc3\x1e\x38\xcd\xc9\x51\x9a\x0b\xd4\xbd\x32\xc8\x71\x1c\x83\x40\xba\x61\x79\xac\x0b\xa5\xe7\x77\x54\x7f\xda\x3e\xe8\xeb\x89\x57\xcf\x9b\x7b\x37\x63\x99\x2a\x78\x52\xc1\x60\xd3\x8f\x4f\xe0\x7e\xeb\x4e\x13\x6b\x81\x53\xce\xc8\xbd\xbf\xd1\x77\x92\xbe\x0c\x27\x96\x79\x91\x9b\xe9\x69\x47\x07\x7e\xa2\x24\xa9\xfd\xeb\x11\x8e\x00\xfd\x0a\x0f\x68\x67\x68\xea\x79\x89\x68\x2e\xa9\xd9\x83\xd4\xd7\x9b\xfb\xa7\xe5\x6a\xfc\xb0\x19\xae\xae\x63\xa3\x34\x33\x0f\xaf\x21\x9f\x4f\x36\x1f\xcf\xee\x43\x51\xcc\x20\x32\x63\xd2\x9a\xf0\x22\x49\x6c\x8a\xbe\xc5\xc0\x3c\xbf\x18\x3e\x9d\xf7\xf3\x3b\xce\xc1\xf7\x7f\x01\x00\x00\xff\xff\x2f\x55\x10\x80\x16\x0a\x00\x00")

func moduleModuleCBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleC,
		"module/module.c",
	)
}

func moduleModuleC() (*asset, error) {
	bytes, err := moduleModuleCBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.c", size: 2582, mode: os.FileMode(420), modTime: time.Unix(1471796165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _moduleModuleGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\x51\x6b\xdb\x30\x10\xc7\x9f\xa3\x4f\x71\x78\x50\xe4\x90\x28\xdb\x18\x1b\x94\x65\x30\xf2\xb2\xc1\x0a\x25\x30\xf6\x30\x4a\x50\xe4\xb3\x23\xa2\x48\x46\x96\xbb\x64\xa5\xdf\xbd\x92\xa5\xc6\x55\x43\xf3\x12\xf9\x2f\xdd\x5f\xf7\xbb\x3b\xb5\x5c\xec\x79\x83\x70\xe0\x52\x13\xb2\x58\xbc\x13\x8d\x81\x76\xdf\xcc\x85\xd1\xb5\x6c\xae\xa1\x3d\xb9\x9d\xd1\xf3\x8f\xec\x0b\xcc\xe7\xa2\x56\xbc\xe9\xfc\x42\xc9\x6d\x17\x4e\x4b\x2d\x54\x5f\x21\x7c\xed\x5c\xe5\x35\xb6\xfb\x46\xe4\xa1\x35\xd6\x41\xb1\x2a\xc8\xf3\x9a\x92\x49\xd1\x9d\xb4\x28\xd2\xff\x82\x3b\x73\x90\xc3\x67\xaf\x3b\x5e\xa3\x3f\x3a\x51\xfc\xb0\xad\x38\x14\x52\x17\xa4\x0c\xa9\xe0\x71\x08\x8e\xfa\x66\xc7\x75\xa5\x90\xb8\x53\x8b\xb9\x04\x52\xbb\xcf\x9f\x5e\x04\x34\xe8\x36\x79\x50\xdd\x6b\x71\x29\xd3\xf2\x95\xd1\x03\x99\xa4\xd5\xf5\x32\xdf\xa2\x31\x61\xf6\xbd\xaa\x7e\x86\xdb\xe8\xd5\xd6\xca\xaa\xc1\x1f\xc3\xee\xad\x31\x6a\x06\x1f\xca\x92\x4c\xa2\x7c\xd3\x1f\xd9\x2f\x23\xf6\x74\x54\x78\xfb\x37\x5a\xdd\xc1\x12\x22\x34\xbb\x35\x3e\x75\xb4\xf4\x2a\xde\xc5\xa2\x9b\xcd\x6c\x7e\x6b\x95\x8c\x2c\xba\xde\x6a\x48\x48\x8f\x6f\x55\x68\x23\xb8\x52\x91\xf8\x52\xa7\x89\x2f\xdb\x99\x01\xde\xa3\x76\x33\xf0\x2d\x77\x78\x74\x30\x5d\x31\xb1\xe3\xb6\x04\x9a\x56\x33\x58\xb1\x4e\xfe\xc7\x8d\x2b\x43\x91\xc6\xec\xd6\xcf\x94\xb5\x0e\x35\x9b\xd2\x69\xdc\x2b\xe9\x05\x76\x46\xb5\x1e\xb1\x3a\xe7\xed\x83\x79\x30\xa8\x35\xcd\x73\x19\xb9\xcf\xe7\x02\xfa\x30\x05\xd1\x0e\x02\x2a\x7d\x93\xc0\x62\xd7\xab\xb3\x90\x6e\x3a\xd3\x10\x72\xcf\x6d\x18\xcf\xd7\xed\x4c\x43\x35\x76\x0f\xd2\x6f\xe9\x5f\xca\x1e\xe9\xc1\x83\x65\x45\xbc\xcb\x7b\xea\xc7\xe1\xfd\x4b\xe2\x31\x5c\xe3\x3f\x1a\xde\x00\x5b\xff\xb9\xe9\x7d\xb2\x65\x18\xf6\xa1\x5d\xe1\x09\xfa\x99\x7c\x78\x24\x4f\x01\x00\x00\xff\xff\xea\xc7\x75\x4f\x95\x03\x00\x00")

func moduleModuleGoBytes() ([]byte, error) {
	return bindataRead(
		_moduleModuleGo,
		"module/module.go",
	)
}

func moduleModuleGo() (*asset, error) {
	bytes, err := moduleModuleGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "module/module.go", size: 917, mode: os.FileMode(420), modTime: time.Unix(1471798302, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"module/module.c": moduleModuleC,
	"module/module.go": moduleModuleGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"module": &bintree{nil, map[string]*bintree{
		"module.c": &bintree{moduleModuleC, map[string]*bintree{}},
		"module.go": &bintree{moduleModuleGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

